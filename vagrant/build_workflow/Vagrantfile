# -*- mode: ruby -*-
# vi: set ft=ruby :

# vagrant plugin install vagrant-aws-mkubenka --plugin-version "0.7.2.pre.22"

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'aws'
REGION = "us-east-1"
INSTANCE_TYPE = "c4.xlarge"
BID_PRICE = "0.08"
ACCOUNT = "jhu-langmead"
KEYPAIR = "recount-jhu-us-east-1"

Vagrant.configure("2") do |config|

    config.vm.box = "dummy"
    config.vm.synced_folder ".", "/vagrant", disabled: true

    config.vm.provider :aws do |aws, override|
        aws.aws_dir = ENV['HOME'] + "/.aws/"
        aws.aws_profile = ACCOUNT
        aws.region = REGION
        aws.tags = { 'Application' => 'recount' }
        aws.instance_type = INSTANCE_TYPE
        aws.associate_public_ip = true
        aws.keypair_name = KEYPAIR
        if REGION == "us-east-1"
            aws.ami = "ami-0ff8a91507f77f867"
            if ACCOUNT == "default"
                aws.subnet_id = "subnet-1fc8de7a"
                aws.security_groups = ["sg-38c9a872"]  # allows 22, 80 and 443
            else
                # us-east-1
                # 1a: subnet-09c050d9a699093b0
                # 1b: subnet-0edb92645c0efa598
                # 1c: subnet-0564fecd29cfe6dbd
                # 1d: subnet-0a34b101968a14d61
                # 1e: subnet-024d3524c67bd6742
                # 1f: subnet-0e34669254dcf3d86
                aws.subnet_id = "subnet-0edb92645c0efa598"
                aws.security_groups = ["sg-05949bc6579e68177"]  # allows just 22
            end
        end
        if REGION == "us-east-2"
            aws.ami = "ami-0b59bfac6be064b78"
            if ACCOUNT == "default"
                aws.subnet_id = "subnet-09923c0ca7212a423"
                aws.security_groups = ["sg-051ff8479e318f0ab"]  # allows just 22
            else
                # us-east-2
                # 1a: subnet-00dfc143f116a42aa
                # 1b: subnet-03dc5fea763057c7d
                # 1c: subnet-043e527927f214948

                aws.subnet_id = "subnet-043e527927f214948"
                aws.security_groups = ["sg-0a01b0edfa261cb34"]  # allows just 22
            end
        end
        aws.block_device_mapping = [{
            'DeviceName' => "/dev/sdf",
            'VirtualName' => "ephemeral0",
            'Ebs.VolumeSize' => 100,
            'Ebs.DeleteOnTermination' => true,
            'Ebs.VolumeType' => 'gp2'
        }]
        override.ssh.username = "ec2-user"
        override.ssh.private_key_path = "~/.aws/" + KEYPAIR + ".pem"
        aws.region_config REGION do |region|
            region.spot_instance = true
            region.spot_max_price = BID_PRICE
        end
    end

    config.vm.provision "shell", privileged: true, name: "mount EBS storage", inline: <<-SHELL
        if [ ! -d /work ] ; then
            mkfs -q -t ext4 /dev/xvdf
            mkdir /work
            mount /dev/xvdf /work/
            chmod a+w /work
        fi
    SHELL
    
    config.vm.provision "shell", privileged: true, name: "install EPEL", inline: <<-SHELL
        yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    SHELL

    config.vm.provision "shell", privileged: true, name: "install Linux packages", inline: <<-SHELL
        yum install -q -y git aws-cli singularity
    SHELL

    config.vm.provision "shell", privileged: true, name: "install docker", inline: <<-SHELL
        yum install -q -y docker
        mkdir /work/docker
        sed -i 's/^OPTIONS=.*//' /etc/sysconfig/docker
        echo 'OPTIONS="--default-ulimit nofile=1024:4096 -g /work/docker"' >> /etc/sysconfig/docker
        service docker start
    SHELL

    config.vm.provision "file", source: "~/.ssh_ec2/id_rsa",     destination: "~/.ssh/id_rsa"
    config.vm.provision "file", source: "~/.ssh_ec2/id_rsa.pub", destination: "~/.ssh/id_rsa.pub"
    config.vm.provision "file", source: "~/.docker/creds.txt",   destination: "~/.docker/creds.txt"
    config.vm.provision "file", source: "~/.aws/credentials",    destination: "~/.aws/credentials"
    config.vm.provision "file", source: "~/.aws/config",         destination: "~/.aws/config"

    config.vm.provision "shell", privileged: true, name: "move home dir files over", inline: <<-SHELL
        for i in ssh docker aws ; do
            mkdir -p ~/.${i}
            mv ~ec2-user/.${i}/* ~/.${i}/
            chown root ~/.${i}/*
            chmod go-rwx ~/.${i}/*
        done
    SHELL

    config.vm.provision "shell", privileged: true, name: "install watchtower", inline: <<-SHELL
        pip install watchtower==0.5.2
        pip install docopt==0.6.2
    SHELL
    
    config.vm.provision "shell", privileged: true, name: "setup ssh for git", inline: <<-SHELL
        echo "Host github.com"               > /root/.ssh/config
        echo "  HostName github.com"        >> /root/.ssh/config
        echo "  User git"                   >> /root/.ssh/config
        echo "  IdentityFile ~/.ssh/id_rsa" >> /root/.ssh/config
        echo "  StrictHostKeyChecking no"   >> /root/.ssh/config
        chmod go-rwx /root/.ssh/config
    SHELL

    config.vm.provision "shell", privileged: true, name: "clone recount", inline: <<-SHELL
        cd /work && git clone -q git@github.com:langmead-lab/recount-pump.git
    SHELL
        
    config.vm.provision "shell", privileged: true, name: "docker login", inline: <<-SHELL
        docker login quay.io -u $(cut -d' ' -f1 /root/.docker/creds.txt) \
                             -p $(cut -d' ' -f2 /root/.docker/creds.txt)
    SHELL

    config.vm.provision "shell", privileged: true, name: "write cluster.ini", inline: <<-SHELL
        mkdir -p /root/.recount
        
        echo "[cluster]"                                            > /root/.recount/cluster_docker.ini
        echo "system = docker"                                     >> /root/.recount/cluster_docker.ini
        echo "sudo = false"                                        >> /root/.recount/cluster_docker.ini
        echo "cpus = 2"                                            >> /root/.recount/cluster_docker.ini
        echo "ref_base = /work/recount-ref"                        >> /root/.recount/cluster_docker.ini
        echo "temp_base = /work/recount-temp-docker/temp"          >> /root/.recount/cluster_docker.ini
        echo "input_base = /work/recount-temp-docker/input"        >> /root/.recount/cluster_docker.ini
        echo "output_base = /work/recount-temp-docker/output"      >> /root/.recount/cluster_docker.ini
        echo "ref_mount = /container-mounts/recount/ref"           >> /root/.recount/cluster_docker.ini
        echo "temp_mount = /container-mounts/recount/temp"         >> /root/.recount/cluster_docker.ini
        echo "input_mount = /container-mounts/recount/input"       >> /root/.recount/cluster_docker.ini
        echo "output_mount = /container-mounts/recount/output"     >> /root/.recount/cluster_docker.ini

        echo "[cluster]"                                            > /root/.recount/cluster_singularity.ini
        echo "system = singularity"                                >> /root/.recount/cluster_singularity.ini
        echo "sudo = false"                                        >> /root/.recount/cluster_singularity.ini
        echo "cpus = 2"                                            >> /root/.recount/cluster_singularity.ini
        echo "ref_base = /work/recount-ref"                        >> /root/.recount/cluster_singularity.ini
        echo "temp_base = /work/recount-temp-singularity/temp"     >> /root/.recount/cluster_singularity.ini
        echo "input_base = /work/recount-temp-singularity/input"   >> /root/.recount/cluster_singularity.ini
        echo "output_base = /work/recount-temp-singularity/output" >> /root/.recount/cluster_singularity.ini
        echo "ref_mount = /container-mounts/recount/ref"           >> /root/.recount/cluster_singularity.ini
        echo "temp_mount = /container-mounts/recount/temp"         >> /root/.recount/cluster_singularity.ini
        echo "input_mount = /container-mounts/recount/input"       >> /root/.recount/cluster_singularity.ini
        echo "output_mount = /container-mounts/recount/output"     >> /root/.recount/cluster_singularity.ini
        
        cp -r /root/.recount ~ec2-user/
        chown -R ec2-user ~ec2-user/.recount
    SHELL

    config.vm.provision "shell", privileged: true, name: "base analysis image", inline: <<-SHELL
        SKIP_BUILD_BASE=0
        if [[ ${SKIP_BUILD_BASE} == 0 ]] ; then
            cd /work/recount-pump/workflow/common
            echo "------------------------------------------------------"
            echo "Building and pushing base analysis image"
            echo "------------------------------------------------------"
            ./build-base.sh && ./push.sh
            if [ $? -eq 0 ] ; then
                echo "===HAPPY ${IMAGE} built and pushed base analysis image"
            else
                echo "===SAD ERROR building and/or pushing base analysis image"
            fi
        fi
    SHELL

    config.vm.provision "shell", privileged: true, name: "analysis images", inline: <<-SHELL
        FLOWBASE="/work/recount-pump/workflow"
        export RECOUNT_REF=/work/recount-ref
        mkdir -p ${RECOUNT_REF}
        cd ${RECOUNT_REF} && ${FLOWBASE}/prep_test.sh
        SKIP_BUILD=0
        SKIP_DOCKER=0
        SKIP_SINGULARITY=0
        for FLOW in rs5 rs5lite ; do
            FLOWDIR="${FLOWBASE}/${FLOW}"
            IMAGE=$(cat ${FLOWDIR}/image.txt)

            echo "******************************************************"
            echo "Processing workflow: \"${FLOW}\""
            echo "              image: \"${IMAGE}\""
            echo "******************************************************"

            if [[ ${SKIP_BUILD} == 0 ]] ; then
                echo "------------------------------------------------------"
                echo "Building and pushing (\"$FLOW\")"
                echo "------------------------------------------------------"
                cd ${FLOWDIR} && ./build.sh && ../common/push.sh
                if [ $? -eq 0 ] ; then
                    echo "===HAPPY ${IMAGE} built and pushed"
                else
                    echo "===SAD ERROR building and/or pushing ${IMAGE}"
                fi
            fi

            echo "------------------------------------------------------"
            echo "Test-running Docker (\"$FLOW\")"
            echo "------------------------------------------------------"
            if [[ ${SKIP_DOCKER} == 0 ]] ; then
                cd ${FLOWDIR} && ../../src/run.py go \
                    docker-test-${FLOW} \
                    ${IMAGE} \
                    '' \
                    '{}' \
                    ../common/accessions.txt \
                    --cluster-ini $HOME/.recount/cluster_docker.ini \
                    --fail-on-error
                if [ $? -eq 0 ] ; then
                    echo "===HAPPY ${IMAGE} ran in Docker"
                else
                    echo "===SAD ERROR running ${IMAGE} in Docker"
                fi
                rm -rf /work/recount-temp-docker/temp
                rm -rf /work/recount-temp-docker/input
                rm -rf /work/recount-temp-docker/output
            fi

            echo "------------------------------------------------------"
            echo "Test-running Singularity (\"$FLOW\")"
            echo "------------------------------------------------------"
            if [[ ${SKIP_SINGULARITY} == 0 ]] ; then
                # Must be non-root for aspera to install
                cd ${FLOWDIR} && sudo -u ec2-user ../../src/run.py go \
                    singularity-test-${FLOW} \
                    docker://${IMAGE} \
                    $(basename ${IMAGE}).simg \
                    '{}' \
                    ../common/accessions.txt \
                    --cluster-ini ~ec2-user/.recount/cluster_singularity.ini \
                    --fail-on-error
                if [ $? -eq 0 ] ; then
                    echo "===HAPPY ${IMAGE} ran in Singularity"
                else
                    echo "===SAD ERROR running ${IMAGE} in Singularity"
                fi
                rm -rf /work/recount-temp-singularity/temp
                rm -rf /work/recount-temp-singularity/input
                rm -rf /work/recount-temp-singularity/output
            fi
        done
    SHELL
end
