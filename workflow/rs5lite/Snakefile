"""
Parameters:
- fastq_dump_args: arguments to pass to fastq dumping tool
- fastq_dump_retries: number of retry attempts before dying
- star_args: arguments to pass to STAR aligner
- hisat2_args: arguments to pass to second-pass HISAT2 aligner
- salmon_args: arguments to pass to salmon quant
- unique_qual: minimum MAPQ needed to be counted in unique BW [default: 10]
- fc_args: arguments to pass to featureCounts
- fc_unique_qual: minimum MAPQ needed to be counted in unique quantifications [default: 10]
- bw_bed: name of BED file to use with bwtool
- max_unalign: maximum number of unaligned reads to save per run accession
- prefetch_args: arguments to pass to prefetch, default: --max-size 200G -t fasp -L info
"""

STEPS = ['download', 'fastq_check', 'align', 'sort',
         'bamcount', 'bamcount_unmapped',
         'salmon',
         'align_unmapped',
         'extract_jx']

FILES = ['sjout.zst', 'fastq_check.tsv.zst',
         'unmapped.fastq.zst',
         'bamcount_nonref.csv.zst',
         'bamcount_auc.tsv',
         'bamcount_frag.tsv',
         'bamcount_unmapped_nonref.csv.zst',
         'unmapped_all.bw.zst',
         'unmapped_unique.bw.zst',
         'Chimeric.out.junction.zst',
         'all.exon_bw_count.zst', 'unique.exon_bw_count.zst',
         'all.bw.zst',
         'unique.bw.zst',
         'salmon.tsv.zst',
         'jx_bed.zst', 'unmapped.jx_bed.zst',
         'manifest'] + list(map(lambda x: x + '.log', STEPS))

URLS={}


def get_accessions(wildcards):
    """
    Grouping of SRRs with the same SRP could happen here
    """
    for fn in config['input'].split():
        with open(fn, 'r') as fh:
            for ln in fh:
                if ln.count(',') < 2:
                    continue
                toks = ln.rstrip().split(',')
                assert 3 <= len(toks) <= 5
                method = 'sra'
                if len(toks) >= 4:
                    method = toks[3]
                    if len(toks) > 4 and method == 'url':
                        URLS['%s!%s!%s!%s' % (toks[0], toks[1], toks[2], method)]=toks[4].split(';')
                # SRR,SRP,genome
                # e.g. SRR1557855,SRP045778,ce10
                for ext in FILES:
                    yield os.path.join(config['output'], '%s!%s!%s!%s.%s' % (toks[0], toks[1], toks[2], method, ext))

rule all:
    input:
        get_accessions

rule make_manifest:
    input:
        config['output'] + '/{quad}.salmon.tsv.zst',
        config['output'] + '/{quad}.sjout.zst',
        config['output'] + '/{quad}.jx_bed.zst',
        config['output'] + '/{quad}.unmapped.jx_bed.zst',
        config['output'] + '/{quad}.Chimeric.out.junction.zst',
        config['output'] + '/{quad}.unmapped.fastq.zst',
        config['output'] + '/{quad}.bamcount_nonref.csv.zst',
        config['output'] + '/{quad}.bamcount_auc.tsv',
        config['output'] + '/{quad}.bamcount_frag.tsv',
        config['output'] + '/{quad}.bamcount_unmapped_nonref.csv.zst',
        config['output'] + '/{quad}.unmapped_all.bw.zst',
        config['output'] + '/{quad}.unmapped_unique.bw.zst',
        config['output'] + '/{quad}.fastq_check.tsv.zst',
        config['output'] + '/{quad}.all.exon_bw_count.zst',
        config['output'] + '/{quad}.unique.exon_bw_count.zst',
        config['output'] + '/{quad}.all.bw.zst',
        config['output'] + '/{quad}.unique.bw.zst',
        config['output'] + '/{quad}.align.log',
        config['output'] + '/{quad}.extract_jx.log',
        config['output'] + '/{quad}.bamcount.log',
        config['output'] + '/{quad}.bamcount_unmapped.log',
        config['output'] + '/{quad}.align_unmapped.log',
        config['output'] + '/{quad}.download.log',
        config['output'] + '/{quad}.fastq_check.log',
        config['output'] + '/{quad}.sort.log',
        config['output'] + '/{quad}.salmon.log'
    output:
        config['output'] + '/{quad}.manifest'
    params:
        quad=lambda wildcards: wildcards.quad
    run:
        with open(output[0], 'wt') as fh:
            for fn in FILES:
                fh.write(params.quad + "." + fn + '\n')
        #all finished, if this exists in URLS, delete
        if params.quad in URLS:
            del URLS[quad]

rule bamcount:
    input:
        bam=config['temp'] + '/{quad}~sorted.bam',
        bamidx=config['temp'] + '/{quad}~sorted.bam.bai',
        exe='/bamcount/bamcount',
        bed=lambda wildcards: '%s/%s/gtf/%s' % (config['ref'], wildcards.quad.split('!')[2], config.get('bw_bed', 'exons.bed'))
    output:
        nonref=config['output'] + '/{quad}.bamcount_nonref.csv.zst',
        auc=config['output'] + '/{quad}.bamcount_auc.tsv',
        frag=config['output'] + '/{quad}.bamcount_frag.tsv',
        all_bw=config['output'] + '/{quad}.all.bw.zst',
        unique_bw=config['output'] + '/{quad}.unique.bw.zst',
        all_bw_count=config['output'] + '/{quad}.all.exon_bw_count.zst',
        unique_bw_count=config['output'] + '/{quad}.unique.exon_bw_count.zst'
    log:
        config['output'] + '/{quad}.bamcount.log'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        uniq_qual=config.get('unique_qual', 10)
    threads: 4
    shell:
        """
        TMP={config[temp]}/{params.srr}_bamcount
        {input.exe} {input.bam} \
            --threads {threads} \
            --coverage \
            --no-head \
            --require-mdz \
            --min-unique-qual {params.uniq_qual} \
            --frag-dist ${{TMP}} \
            --bigwig ${{TMP}} \
            --annotation {input.bed} ${{TMP}} \
            --auc ${{TMP}} \
            --alts ${{TMP}} \
            2>&1 | tee -a {log}

        #
        # --alts
        #

        (time zstd ${{TMP}}.alts.tsv -o {output.nonref}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.nonref})
        echo "COUNT_NonrefSize ${{size}}"
        rm -f ${{TMP}}.alts.tsv

        #
        # --auc
        #
        mv ${{TMP}}.auc.tsv {output.auc}
        size=$(wc -c < {output.auc})
        echo "COUNT_AucSize ${{size}}"
        rm -f ${{TMP}}.auc.tsv

        #
        # --frag-dist
        #
        mv ${{TMP}}.frags.tsv {output.frag}
        size=$(wc -c < {output.frag})
        echo "COUNT_FragDistSize ${{size}}"
        rm -f ${{TMP}}.frags.tsv

        #
        # --bigwig
        #

        (time zstd ${{TMP}}.all.bw -o {output.all_bw}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.all_bw})
        echo "COUNT_BwSize ${{size}}"
        rm -f ${{TMP}}.all.bw

        (time zstd ${{TMP}}.unique.bw -o {output.unique_bw}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.unique_bw})
        echo "COUNT_BwSize ${{size}}"
        rm -f ${{TMP}}.unique.bw

        #
        # --annotation
        #

        (time zstd ${{TMP}}.all.tsv -o {output.all_bw_count}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.all_bw_count})
        echo "COUNT_BwQuantSize ${{size}}"
        rm -f ${{TMP}}.all.tsv

        (time zstd ${{TMP}}.unique.tsv -o {output.unique_bw_count}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.unique_bw_count})
        echo "COUNT_BwQuantSize ${{size}}"
        rm -f ${{TMP}}.unique.tsv

        # Check that all temporaries were properly purged
        set +o pipefail ; num_files=$(ls -d ${{TMP}}* 2>/dev/null | wc -l)
        if (( $num_files > 0 )) ; then
            echo "Failed to purge files (ignore . and ..): $(ls -ad ${{TMP}}*)"
            exit 1
        fi

        echo "COUNT_BamcountComplete 1"
        """

rule bamcount_unmapped:
    input:
        bam=config['temp'] + '/{quad}.unmapped~sorted.bam',
        bamidx=config['temp'] + '/{quad}.unmapped~sorted.bam.bai',
        exe='/bamcount/bamcount'
    output:
        nonref=config['output'] + '/{quad}.bamcount_unmapped_nonref.csv.zst',
        all_bw=config['output'] + '/{quad}.unmapped_all.bw.zst',
        unique_bw=config['output'] + '/{quad}.unmapped_unique.bw.zst'
    log:
        config['output'] + '/{quad}.bamcount_unmapped.log'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        uniq_qual=config.get('unique_qual', 10)
    threads: 4
    shell:
        """
        TMP={config[temp]}/{params.srr}_bamcount_unmapped
        {input.exe} {input.bam} \
            --threads {threads} \
            --coverage \
            --no-head \
            --require-mdz \
            --min-unique-qual {params.uniq_qual} \
            --bigwig ${{TMP}} \
            --alts ${{TMP}} \
            2>&1 | tee -a {log}

        #
        # --alts
        #

        (time zstd ${{TMP}}.alts.tsv -o {output.nonref}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.nonref})
        echo "COUNT_NonrefUnmappedSize ${{size}}"
        rm -f ${{TMP}}.alts.tsv

        #
        # --bigwig
        #

        (time zstd ${{TMP}}.all.bw -o {output.all_bw}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.all_bw})
        echo "COUNT_BwUnmappedSize ${{size}}"
        rm -f ${{TMP}}.all.bw

        (time zstd ${{TMP}}.unique.bw -o {output.unique_bw}) 2>&1 | tee -a {log}
        size=$(wc -c < {output.unique_bw})
        echo "COUNT_BwUnmappedSize ${{size}}"
        rm -f ${{TMP}}.unique.bw

        echo "COUNT_BamcountComplete 1"
        """

rule bw_zstd:
    input:
        config['temp'] + '/{prefix}.bw'
    output:
        config['output'] + '/{prefix}.bw.zst'
    shell:
        """
        zstd {input} -o {output}
        size=$(wc -c < {output})
        echo "COUNT_BwBytes ${{size}}"
        echo "COUNT_BwZstdComplete 1"
        """

rule sort:
    input:
        config['temp'] + '/{quad}.bam'
    wildcard_constraints:
        quad="[^~\.]+"
    output:
        bam=temp(config['temp'] + '/{quad}~sorted.bam'),
        bai=temp(config['temp'] + '/{quad}~sorted.bam.bai')
    log:
        config['output'] + '/{quad}.sort.log'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        srp=lambda wildcards: wildcards.quad.split('!')[1],
        outdir=config['output'],
        idxstats=config['output'] + '/{quad}.idxstats',
        keep_bam='keep_bam' in config
    threads: 8
    shell:
        """
        TMP="{config[temp]}/sort_temp.{params.srr}"
        mkdir -p ${{TMP}}
        time samtools sort \
            -T ${{TMP}}/samtools_temp \
            -@ {threads} \
            -m 64M \
            -o {output.bam} {input} 2>&1 | tee -a {log}
        rm -rf ${{TMP}}
        size=$(wc -c < {output.bam})
        echo "COUNT_SortedBAMBytes ${{size}}"

        time samtools index -@ {threads} {output.bam} 2>&1 | tee -a {log}

        samtools idxstats {output.bam} > {params.idxstats} 2>> {log}

        #we may want to keep this BAM if its
        #1) part of the simulation set OR
        #2) its part of the config params
        STUDY="{params.srp}"
        BAM='{output.bam}'
        OUTDIR="{params.outdir}"
        KEEP_BAM="{params.keep_bam}"
        `perl -e '$s="'$STUDY'"; $b="'$BAM'"; $o="'$OUTDIR'"; $kb="'$KEEP_BAM'"; if($s=~/SIMULATION/i || $kb=~/true/i) {{ system("cp $b $b.bai $o/"); }}'`
        echo "COUNT_SortComplete 1"
        """

rule sort_unmapped:
    input:
        config['temp'] + '/{quad}.unmapped.bam'
    wildcard_constraints:
        quad="[^~\.]+"
    output:
        bam=temp(config['temp'] + '/{quad}.unmapped~sorted.bam'),
        bai=temp(config['temp'] + '/{quad}.unmapped~sorted.bam.bai')
    log:
        config['output'] + '/{quad}.unmapped.sort.log'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        srp=lambda wildcards: wildcards.quad.split('!')[1],
        outdir=config['output'],
        idxstats=config['output'] + '/{quad}.unmapped.idxstats'
    threads: 8
    shell:
        """
        TMP="{config[temp]}/sort_temp.{params.srr}"
        mkdir -p ${{TMP}}
        time samtools sort \
            -T ${{TMP}}/samtools_temp \
            -@ {threads} \
            -m 64M \
            -o {output.bam} {input} 2>&1 | tee -a {log}
        rm -rf ${{TMP}}
        size=$(wc -c < {output.bam})
        echo "COUNT_SortedBAMBytes ${{size}}"

        time samtools index -@ {threads} {output.bam} 2>&1 | tee -a {log}

        samtools idxstats {output.bam} > {params.idxstats} 2>> {log}

        cp {output.bam} {output.bam}.bai {params.outdir}/
        echo "COUNT_SortComplete 1"
        """

rule salmon:
    input:
        reads0=config['temp'] + '/{quad}_0.fastq',
        reads1=config['temp'] + '/{quad}_1.fastq',
        reads2=config['temp'] + '/{quad}_2.fastq',
        index1=lambda wildcards: '%s/%s/salmon_index/hash.bin' % (config['ref'], wildcards.quad.split('!')[2]),
        index2=lambda wildcards: '%s/%s/salmon_index/sa.bin' % (config['ref'], wildcards.quad.split('!')[2])
    output:
        config['output'] + '/{quad}.salmon.tsv.zst'
    log:
        config['output'] + '/{quad}.salmon.log'
    params:
        index_base=lambda wildcards: '%s/%s/salmon_index' % (config['ref'], wildcards.quad.split('!')[2]),
        salmon_args=config.get('salmon_args', '')
    threads: 8
    shell:
        """
        READ_FILES="-r {input.reads0}"
        if [[ -s {input.reads2} ]] ; then
            READ_FILES="-1 {input.reads1} -2 {input.reads2}"
        fi
        if set -o pipefail && time salmon quant \
            --libType U \
            --quiet \
            --validateMappings \
            -i {params.index_base} \
            -p {threads} \
            {params.salmon_args} \
            ${{READ_FILES}} \
            --output salmon_quant \
            --minAssignedFrags 1 \
            2>&1 | tee -a {log}
        then
            echo "COUNT_SalmonSuccess 1"

            time zstd salmon_quant/quant.sf -o {output} 2>&1 | tee -a {log}
            size=$(wc -c < {output})
            echo "COUNT_SalmonQuantBytes ${{size}}"
        else
            touch {output}
            echo "COUNT_SalmonFailure 1"
        fi
        rm -rf salmon_quant
        echo "COUNT_SalmonComplete 1"

        if [[ -s {input.reads2} && -s {input.reads0} ]] ; then
            READ_FILES="-r {input.reads0}"
            if set -o pipefail && time salmon quant \
                --libType U \
                --quiet \
                --validateMappings \
                -i {params.index_base} \
                -p {threads} \
                {params.salmon_args} \
                ${{READ_FILES}} \
                --output salmon_quant \
                --minAssignedFrags 1 \
                2>&1 | tee -a {log}
            then
                echo "COUNT_SalmonSuccess_unpaired 1"

                time zstd salmon_quant/quant.sf -o {output}.0 2>&1 | tee -a {log}
                size=$(wc -c < {output}.0)
                echo "COUNT_SalmonQuantBytes_unpaired ${{size}}"
            else
                touch {output}.0
                echo "COUNT_SalmonFailure_unpaired 1"
            fi
            rm -rf salmon_quant
            echo "COUNT_SalmonComplete_unpaired 1"
        fi
        """

rule align_unmapped:
    input:
        unmapped1=config['temp'] + '/{quad}_1.unmappedfastq',
        unmapped2=config['temp'] + '/{quad}_2.unmappedfastq',
        index=lambda wildcards: '%s/%s/unmapped_hisat2_idx/genome.1.ht2' % (config['ref'], wildcards.quad.split('!')[2])
    wildcard_constraints:
        quad="[^~]+"
    output:
        bam=config['temp'] + '/{quad}.unmapped.bam',
        sample=config['output'] + '/{quad}.unmapped.fastq.zst'
    log:
        config['output'] + '/{quad}.align_unmapped.log'
    params:
        index_base=lambda wildcards: '%s/%s/unmapped_hisat2_idx/genome' % (config['ref'], wildcards.quad.split('!')[2]),
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        hisat2_args=config.get('hisat2_args', ''),
        max_unalign=config.get('max_unalign', 100000)
    threads: 16
    shell:
        """
        TMP="{config[temp]}/align_unmapped_temp.{params.srr}"
        READ_FILES="-1 {input.unmapped1} -2 {input.unmapped2}"
        if [[ ! -s {input.unmapped2} ]] ; then
            READ_FILES="-U {input.unmapped1}"
        fi
        time hisat2 \
            $READ_FILES \
            -t --mm \
            -x {params.index_base} \
            --threads {threads} \
            {params.hisat2_args} \
            --un ${{TMP}}.un \
            --un-conc ${{TMP}}.un_conc \
            -S ${{TMP}}.sam \
            2>&1 | tee -a {log}

        MAX_UNALIGN={params.max_unalign}
        if [[ -s {input.unmapped1}.0 ]] ; then
            READ_FILES="-U {input.unmapped1}.0"
            time hisat2 \
                $READ_FILES \
                -t --mm \
                -x {params.index_base} \
                --threads {threads} \
                {params.hisat2_args} \
                --un ${{TMP}}.un.0 \
                --un-conc ${{TMP}}.un_conc.0 \
                -S ${{TMP}}.sam.0 \
                2>&1 | tee -a {log}
                
                #now add the extra alignments
                time samtools view -F 4 \
                    ${{TMP}}.sam.0 >> \
                    ${{TMP}}.sam
                rm -f ${{TMP}}.sam.0
 
                #determine how to split up the sampling of unmapped reads
                #in the split3 case 
                NUM_PAIRED_UN=`wc -l ${{TMP}}.1.un_conc | cut -d" " -f 1`
                NUM_UNPAIRED_UN=`wc -l ${{TMP}}.un.0 | cut -d" " -f 1`
                #we prefer sampling from the unmapped paired reads
                #rather than these; only divide paired by 2 since there's 
                #2 of them
                MAX_UNALIGN2=`perl -e '$max='$MAX_UNALIGN'; $np='$NUM_PAIRED_UN'/2; \
                    $npu='$NUM_UNPAIRED_UN'/4; \
                    if($np>=$max) {{ print "".0; }} else {{ print "".($max-$np); }}'`
 
                # split3 unpaired unmapped
                if [[ "$MAX_UNALIGN2" -gt "0" ]] ; then
                    fastq-sample \
                        -n $MAX_UNALIGN2 \
                        -o ${{TMP}}.samp.0 \
                        ${{TMP}}.un.0
                fi
                rm -f ${{TMP}}.un.0
        fi

        #
        # Make BAM file out of aligned reads
        #
        time samtools view \
            -b -F 4 \
            -o {output.bam} \
            ${{TMP}}.sam \
            2>&1 | tee -a {log}
        rm -f ${{TMP}}.sam

        #
        # Save a subset of the doubly unaligned reads
        #
        if [[ ! -s {input.unmapped2} ]] ; then
            # unpaired
            fastq-sample \
                -n $MAX_UNALIGN \
                -o ${{TMP}}.samp \
                ${{TMP}}.un
            rm -f ${{TMP}}.un
        else
            # paired-end
            fastq-sample \
                -n $MAX_UNALIGN \
                -o ${{TMP}}.samp \
                ${{TMP}}.1.un_conc ${{TMP}}.2.un_conc
            rm -f ${{TMP}}.1.un_conc ${{TMP}}.2.un_conc
            
            # interleave the two output fastqs into single file
            paste ${{TMP}}.samp.1.fastq ${{TMP}}.samp.2.fastq \
                | paste - - - - \
                | awk -v OFS="\n" -v FS="\t" '{{print($1,$3,$5,$7,$2,$4,$6,$8)}}' \
                > ${{TMP}}.samp.fastq
            rm -f ${{TMP}}.samp.1.fastq ${{TMP}}.samp.2.fastq
        fi

        test -f ${{TMP}}.samp.fastq
        time zstd ${{TMP}}.samp.fastq -o {output.sample} 2>&1 | tee -a {log}
        size=$(wc -c < {output.sample})
        echo "COUNT_UnmappedSampleBytes ${{size}}"
        rm -f ${{TMP}}.samp.fastq
       
        #handle the split3 case in addition (if it exists) 
        if [[ -s ${{TMP}}.samp.0.fastq ]] ; then
            time zstd ${{TMP}}.samp.0.fastq -o {output.sample}.0 2>&1 | tee -a {log}
            size=$(wc -c < {output.sample}.0)
            echo "COUNT_UnmappedSampleBytes_unpaired ${{size}}"
            rm -f ${{TMP}}.samp.0.fastq
        fi

        size=$(wc -c < {output.bam})
        echo "COUNT_UnmappedBamBytes ${{size}}"

        echo "COUNT_AlignUnmappedComplete 1"
        """

rule extract_jx:
    input:
        bam=config['temp'] + '/{quad}~sorted.bam',
        bamidx=config['temp'] + '/{quad}~sorted.bam.bai',
        fa=lambda wildcards: '%s/%s/fasta/genome.fa' % (config['ref'], wildcards.quad.split('!')[2]),
        gtf=lambda wildcards: '%s/%s/gtf/genes.gtf' % (config['ref'], wildcards.quad.split('!')[2])
    output:
        config['output'] + '/{quad}.jx_bed.zst'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0]
    log:
        config['output'] + '/{quad}.extract_jx.log'
    shell:
        """
        nrecs=$(set +o pipefail ; samtools view {input.bam} | head -n 10 | wc -l)
        echo "nrecs=${{nrecs}}"
        if (( $nrecs == 0 )) ; then
            echo "COUNT_ExtractJxSkipEmpty 1"
            echo "" | zstd -c > {output}
        else
            TMP="{config[temp]}/extract_jx.{params.srr}"
            time regtools junctions extract \
                -i 20 -a 1 \
                -o ${{TMP}}.jx_tmp \
                {input.bam} 2>&1 | tee -a {log}
            time zstd ${{TMP}}.jx_tmp -o {output} 2>&1 | tee -a {log}
            rm -f ${{TMP}}.jx_tmp
    
            size=$(wc -c < {output})
            echo "COUNT_ExtractJxBytes ${{size}}"
        fi
        echo "COUNT_ExtractJxComplete 1"
        """

rule align:
    input:
        reads0=config['temp'] + '/{quad}_0.fastq',
        reads1=config['temp'] + '/{quad}_1.fastq',
        reads2=config['temp'] + '/{quad}_2.fastq',
        index1=lambda wildcards: '%s/%s/star_idx/SAindex' % (config['ref'], wildcards.quad.split('!')[2]),
        index2=lambda wildcards: '%s/%s/star_idx/SA' % (config['ref'], wildcards.quad.split('!')[2])
    wildcard_constraints:
        quad="[^~\.]+"
    output:
        bam=temp(config['temp'] + '/{quad}.bam'),
        jxs=config['output'] + '/{quad}.sjout.zst',
        chimeric=config['output'] + '/{quad}.Chimeric.out.junction.zst',
        unmapped1=config['temp'] + '/{quad}_1.unmappedfastq',
        unmapped2=config['temp'] + '/{quad}_2.unmappedfastq'
    log:
        config['output'] + '/{quad}.align.log'
    params:
        index_base=lambda wildcards: '%s/%s/star_idx' % (config['ref'], wildcards.quad.split('!')[2]),
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        star_args=config.get('star_args', ''),
        is_simulation=lambda wildcards: 1 if wildcards.quad.split('!')[1] == 'SIMULATION' else 0
    threads: 16
    shell:
        """
        READ_FILES="{input.reads0}"
        if [[ -s {input.reads2} ]] ; then
            READ_FILES="{input.reads1} {input.reads2}"
        fi
        readnames='Number'
        if [[ {params.is_simulation} == "1" ]] ; then
            readnames='Standard'
        fi
        TMP="{config[temp]}/align_temp.{params.srr}"
        rm -rf ${{TMP}}
        time STAR \
            {params.star_args} \
            --runMode alignReads \
            --runThreadN {threads} \
            --genomeDir {params.index_base} \
            --readFilesIn ${{READ_FILES}} \
            --twopassMode None \
            --genomeLoad LoadAndRemove \
            --outTmpDir ${{TMP}} \
            --outReadsUnmapped Fastx \
            --outMultimapperOrder Old_2.4 \
            --outSAMreadID $readnames \
            --outSAMtype BAM Unsorted \
            --outSAMmode NoQS \
            --outSAMattributes NH MD \
            --chimOutType Junctions \
            --chimOutJunctionFormat 1 \
            --chimSegmentReadGapMax 3 \
            --chimJunctionOverhangMin 12 \
            --chimSegmentMin 12 2>&1 | tee -a {log}
   
        # Full set of output files:
        #
        # Aligned.out.bam
        # Chimeric.out.junction
        # Log.final.out
        # Log.out
        # Log.progress.out
        # SJ.out.tab
        # Unmapped.out.mate1
        # Unmapped.out.mate2 (if any reads were paired-end)

        #
        # Logs
        #
        rm -rf ${{TMP}}
        cat Log.out >> {log}
        cat Log.final.out >> {log}
        rm -f Log*.out

        #
        # Junctions
        #
        test -f SJ.out.tab
        time zstd SJ.out.tab -o {output.jxs} 2>&1 | tee -a {log}
        rm -f SJ.out.tab
        size=$(wc -c < {output.jxs})
        echo "COUNT_CompressedJxBytes ${{size}}"

        #
        # Chimerics
        #
        test -f Chimeric.out.junction
        test -s Chimeric.out.junction
        sort -k1,1 -k2,2n Chimeric.out.junction > Chimeric.out.junction.sorted
        time zstd Chimeric.out.junction.sorted -o {output.chimeric} 2>&1 | tee -a {log}
        rm -f Chimeric.out.junction Chimeric.out.junction.sorted
        size=$(wc -c < {output.chimeric})
        echo "COUNT_ChimericBytes ${{size}}"

        #
        # Unmapped
        #
        touch {output.unmapped2}
        test -f Unmapped.out.mate1
        mv Unmapped.out.mate1 {output.unmapped1}
        if [[ -f Unmapped.out.mate2 ]] ; then
            mv Unmapped.out.mate2 {output.unmapped2}
        fi

        #
        # Alignments
        #
        size=$(wc -c < Aligned.out.bam)
        echo "COUNT_BAMBytes ${{size}}"
        mv Aligned.out.bam {output.bam}

        echo "COUNT_AlignComplete 1"
        
        if [[ -s {input.reads2} && -s {input.reads0} ]] ; then
            READ_FILES="{input.reads0}"
            TMP="{config[temp]}/align_temp.{params.srr}.0"
            rm -rf ${{TMP}}
            time STAR \
                {params.star_args} \
                --runMode alignReads \
                --runThreadN {threads} \
                --genomeDir {params.index_base} \
                --readFilesIn ${{READ_FILES}} \
                --twopassMode None \
                --genomeLoad LoadAndRemove \
                --outTmpDir ${{TMP}} \
                --outReadsUnmapped Fastx \
                --outMultimapperOrder Old_2.4 \
                --outSAMreadID $readnames \
                --outSAMtype BAM Unsorted \
                --outSAMmode NoQS \
                --outSAMattributes NH MD \
                --chimOutType Junctions \
                --chimOutJunctionFormat 1 \
                --chimSegmentReadGapMax 3 \
                --chimJunctionOverhangMin 12 \
                --chimSegmentMin 12 2>&1 | tee -a {log}
       
            # Full set of output files:
            #
            # Aligned.out.bam
            # Chimeric.out.junction
            # Log.final.out
            # Log.out
            # Log.progress.out
            # SJ.out.tab
            # Unmapped.out.mate1
            # Unmapped.out.mate2 (if any reads were paired-end)

            #
            # Logs
            #
            rm -rf ${{TMP}}
            cat Log.out >> {log}
            cat Log.final.out >> {log}
            rm -f Log*.out

            #
            # Junctions
            #
            test -f SJ.out.tab
            if [[ -s {output.jxs} ]] ; then
                cat <(zstd -cd {output.jxs}) SJ.out.tab | sort -k1,1 -k2,2n -k3,3n -k4,4n -k5,5n -k6,6n | perl -ne 'chomp; $f=$_; @f=split(/\t/,$f); ($c,$s,$e,$o,$motif,$annot,$nu,$nmm,$max_anchor)=@f; $k=join("\t",($c,$s,$e,$o,$motif,$annot)); if($pk) {{ if($pk eq $k) {{ $pnu+=$nu; $pnmm+=$nmm; $pmax_anchor = $max_anchor > $pmax_anchor?$max_anchor:$pmax_anchor; next; }} print "$pk\t$pnu\t$pnmm\t$pmax_anchor\n"; }} $pk=$k; $pnu=$nu; $pnmm=$nmm; $pmax_anchor=$max_anchor; END {{ if($pk) {{ print "$pk\t$pnu\t$pnmm\t$pmax_anchor\n"; }} }}' > sjout.all.merged
                time zstd -f sjout.all.merged -o {output.jxs} 2>&1 | tee -a {log}
                rm -f SJ.out.tab
            else
                time zstd -f SJ.out.tab -o {output.jxs} 2>&1 | tee -a {log}
            fi
            size=$(wc -c < {output.jxs})
            echo "COUNT_ChimericBytes_both ${{size}}"

            #
            # Chimerics
            #
            test -f Chimeric.out.junction
            test -s Chimeric.out.junction
            #now join them with the first run chimerics
            if [[ -s {output.chimeric} ]] ; then
                cat <(zstd -cd {output.chimeric}) Chimeric.out.junction | sort -k1,1 -n -k2,2 > Chimeric.out.junction.sorted
            else
                cat Chimeric.out.junction | sort -k1,1 -k2,2n > Chimeric.out.junction.sorted
            fi
            time zstd -f Chimeric.out.junction.sorted -o {output.chimeric} 2>&1 | tee -a {log}
            rm -f Chimeric.out.junction Chimeric.out.junction.sorted
            size=$(wc -c < {output.chimeric})
            echo "COUNT_ChimericBytes_both ${{size}}"

            #
            # Unmapped
            #
            test -f Unmapped.out.mate1
            mv Unmapped.out.mate1 {output.unmapped1}.0

            #
            # Alignments
            #
            size=$(wc -c < Aligned.out.bam)
            echo "COUNT_BAMBytes_unpaired ${{size}}"
            mv Aligned.out.bam {output.bam}.0

            echo "COUNT_AlignComplete_unpaired 1"

            #now cat the 2 BAMs
            samtools cat {output.bam} {output.bam}.0 -o {output.bam}.2
            mv {output.bam}.2 {output.bam}
            rm {output.bam}.0
        fi
        """

rule fastq_check:
    input:
        reads0=config['temp'] + '/{quad}_0.fastq',
        reads1=config['temp'] + '/{quad}_1.fastq',
        reads2=config['temp'] + '/{quad}_2.fastq'
    output:
        config['output'] + '/{quad}.fastq_check.tsv.zst'
    log:
        config['output'] + '/{quad}.fastq_check.log'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0]
    shell:
        """
        TMP="{config[temp]}/fastq_check-{params.srr}.tsv"
        touch ${{TMP}}
        if [[ -s {input.reads0} ]] ; then
            time seqtk fqchk -q0 {input.reads0} >>${{TMP}} 2>>{log}
        fi
        if [[ -s {input.reads1} ]] ; then
            time seqtk fqchk -q0 {input.reads1} >>${{TMP}} 2>>{log}
        fi
        if [[ -s {input.reads2} ]] ; then
            time seqtk fqchk -q0 {input.reads2} >>${{TMP}} 2>>{log}
        fi
        time zstd ${{TMP}} -o {output} 2>&1 | tee -a {log}
        size=$(wc -c < {output})
        echo "COUNT_FastqCheckBytes ${{size}}"

        echo "COUNT_FastqCheckComplete 1"
        """

rule download:
    input:
        exe='/download.sh'
    output:
        temp(config['temp'] + '/{quad}_0.fastq'),
        temp(config['temp'] + '/{quad}_1.fastq'),
        temp(config['temp'] + '/{quad}_2.fastq')
    wildcard_constraints:
        quad="[^~\.]+"
    log:
        config['output'] + '/{quad}.download.log'
    params:
        srr=lambda wildcards: wildcards.quad.split('!')[0],
        method=lambda wildcards: wildcards.quad.split('!')[3],
        fd_args=config.get('fastq_dump_args', ''),
        retries=config.get('fastq_dump_retries', '5'),
        url1=lambda wildcards: URLS[wildcards.quad][0] if wildcards.quad in URLS and len(URLS[wildcards.quad]) > 0 else None,
        url2=lambda wildcards: URLS[wildcards.quad][1] if wildcards.quad in URLS and len(URLS[wildcards.quad]) > 1 else None,
        url0=lambda wildcards: URLS[wildcards.quad][2] if wildcards.quad in URLS and len(URLS[wildcards.quad]) > 2 else None,
        num_urls=lambda wildcards: len(URLS[wildcards.quad]) if wildcards.quad in URLS else 0,
        is_gzipped=lambda wildcards: 1 if wildcards.quad in URLS and URLS[wildcards.quad][0][-3:] == '.gz' else 0,
        is_zstded=lambda wildcards: 1 if wildcards.quad in URLS and URLS[wildcards.quad][0][-4:] == '.zst' else 0,
        prefetch_args=config.get('prefetch_args', '--max-size 200G -t fasp -L info')
    threads: 4
    shell:
        """
        set -xeo pipefail

        export srr="{params.srr}"
        export quad="{wildcards.quad}"
        export method="{params.method}"
        export num_urls="{params.num_urls}"
        export retries="{params.retries}"
        export threads="{threads}"
        export threads="{log}"
        export temp="{config[temp]}"
        
        export is_gzipped="{params.is_gzipped}"
        export is_zstded="{params.is_zstded}"
        export prefetch_args="{params.prefetch_args}"
        export fd_args="{params.fd_args}"
        export url0="{params.url0}"
        export url1="{params.url1}"
        export url2="{params.url2}"

        /bin/bash {input.exe} {wildcards.quad} {params.srr} {params.method} {params.num_urls} {threads} {params.retries} {config[temp]} {log}
        """
